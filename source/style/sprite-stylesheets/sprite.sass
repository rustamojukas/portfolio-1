/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$list1-name: 'list1'
$list1-x: 0px
$list1-y: 120px
$list1-offset-x: 0px
$list1-offset-y: -120px
$list1-width: 58px
$list1-height: 108px
$list1-total-width: 240px
$list1-total-height: 228px
$list1-image: '../img/sprite-png/sprite.png'
$list1: (0px, 120px, 0px, -120px, 58px, 108px, 240px, 228px, '../img/sprite-png/sprite.png', 'list1', )
$list2-name: 'list2'
$list2-x: 141px
$list2-y: 0px
$list2-offset-x: -141px
$list2-offset-y: 0px
$list2-width: 99px
$list2-height: 91px
$list2-total-width: 240px
$list2-total-height: 228px
$list2-image: '../img/sprite-png/sprite.png'
$list2: (141px, 0px, -141px, 0px, 99px, 91px, 240px, 228px, '../img/sprite-png/sprite.png', 'list2', )
$list3-name: 'list3'
$list3-x: 0px
$list3-y: 0px
$list3-offset-x: 0px
$list3-offset-y: 0px
$list3-width: 141px
$list3-height: 120px
$list3-total-width: 240px
$list3-total-height: 228px
$list3-image: '../img/sprite-png/sprite.png'
$list3: (0px, 0px, 0px, 0px, 141px, 120px, 240px, 228px, '../img/sprite-png/sprite.png', 'list3', )
$quote-name: 'quote'
$quote-x: 58px
$quote-y: 120px
$quote-offset-x: -58px
$quote-offset-y: -120px
$quote-width: 75px
$quote-height: 61px
$quote-total-width: 240px
$quote-total-height: 228px
$quote-image: '../img/sprite-png/sprite.png'
$quote: (58px, 120px, -58px, -120px, 75px, 61px, 240px, 228px, '../img/sprite-png/sprite.png', 'quote', )
$spritesheet-width: 240px
$spritesheet-height: 228px
$spritesheet-image: '../img/sprite-png/sprite.png'
$spritesheet-sprites: ($list1, $list2, $list3, $quote, )
$spritesheet: (240px, 228px, '../img/sprite-png/sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
